define(["app","../js/exercise","../lib/Sortable"],function(App,Exercises,Sortable){var DragToBucket=Exercises.Exercise.extend({type:"DragToBucket",onUpdate:function(){var self=this,state={};this.buckets.find(".bucket").each(function(bucketIndex,bucket){var newOrder=[],$bucket=$(bucket),name=$bucket.data("name")||bucketIndex;$bucket.find(".item").each(function(index,el){newOrder.push($(el).data("index"))}),state[name]=newOrder}),self.set("state",state),self.trigger("change:state",state,self)},componentDidMount:function(){var self=this;self.bucketNames={},self.buckets=self.$el.find(".buckets"),self.buckets=self.buckets.length?self.buckets:self.$el,self.sortables=[],self.options.bucketsSortable&&self.sortables.push(new Sortable(self.buckets[0],{group:"buckets"+self.id})),self.buckets.find(".bucket").each(function(bucketIndex,bucket){var $bucket=$(bucket),name=$bucket.data("name")||bucketIndex;if(!name)throw alert("Data-name is required for every .bucket. "+self.options.name||self.id),"Data-name is required for every .bucket. "+self.options.name||self.id;self.bucketNames[name]=$bucket,$bucket.find(".items").each(function(index,container){self.sortables.push(new Sortable(container,{group:self.options.group||"bucket"+self.id,handle:self.options.handle,draggable:self.options.draggable||".item",onAdd:function(){self.onUpdate()},onUpdate:function(){self.onUpdate()}}))})});var l=self.$el.find(".item").length;self.irritationLevel=self.options.irritationLevel||self.defaultIrritationLevel+Math.round(l*l),self.on("change:state",function(){self.changingRemotely||App.trigger("classroom:broadcast",{action:"ex_"+self.id+":change",state:self.get("state")})})},rearrange:function(){var self=this,state=self.get("state");if(state){for(var items=self.$el.find(".item").detach(),l=items.length,currentOrder=new Array(l),i=0;l>i;i++){var index=$(items[i]).data("index");if(!index)throw alert("You forgot to have data-index property for a drag-to-bucket exercise somwehere on this page. Please have this property."),"You forgot to have data-index property for a drag-to-bucket exercise somwehere on this page. Please have this property.";currentOrder[index]=i}_.each(_.keys(state),function(bkt){var $bucket=self.bucketNames[bkt],bucketContainer=$bucket.find(".items");bucketContainer.length||(bucketContainer=$bucket);for(var bucketItems=state[bkt],c=0,biLen=bucketItems.length;biLen>c;c++)bucketContainer.append(items[currentOrder[bucketItems[c]]])})}},onRemoteChanges:function(msg){var self=this;self.changingRemotely=!0,self.set("state",msg.state);var newValue="coco",notification=App.T.translate("yesNoChangedNoDescription",[msg.from.name||msg.from.id,newValue]);App.trigger("notify",notification),self.rearrange(),self.onUpdate(),self.changingRemotely=!1},componentWillUnmount:function(){if(this.sortables){for(var i=0,v=this.sortables,n=v.length;n>i;i++)v[i].destroy();this.sortables=null}},render:function(){var self=this,score=self.get("score"),bucketsThatHave={};self.rearrange(),self.buckets.find(".bucket").each(function(bucketIndex,bucket){var $bucket=$(bucket),name=$bucket.data("name")||bucketIndex;$bucket.find(".item").each(function(itemIndex,item){var $item=$(item),target=$item.data("target");$item.removeClass("in-good-bucket in-bad-bucket"),$item.addClass(target===name?"in-good-bucket":"in-bad-bucket"),bucketsThatHave[target]=bucketsThatHave[target]||[],bucketsThatHave[target].push(name)})}),_.each(_.keys(bucketsThatHave),function(key){var u=_.union(bucketsThatHave[key]),allIn=1===u.length&&u[0]===key,$bucket=$('*[data-name="'+key+'"].bucket');$bucket.removeClass("all-in"),allIn&&$bucket.addClass("all-in")}),score>=100?self.$el.addClass("done"):self.$el.removeClass("done")},score:function(){var self=this,score=0,state=self.get("state"),bucketsNo=0;return self.buckets.find(".bucket").each(function(bucketIndex,bucket){var $bucket=$(bucket),name=$bucket.data("name")||bucketIndex,bucketScore=0,n=0;if($bucket.find(".item").each(function(itemIndex,item){var target=$(item).data("target");n++,name===target?bucketScore++:bucketScore--}),n){bucketScore=Math.round(100*bucketScore/n),bucketScore=Math.min(100,Math.max(bucketScore,0)),$bucket.removeClass("no-bad-items-inside"),100===bucketScore&&$bucket.addClass("no-bad-items-inside");var bucketOrderScore=0;if(100===bucketScore&&self.options.orderInBuckets){var itemIndexes=state[name],iiLen=itemIndexes.length;if(iiLen>1){for(var i=1;iiLen>i;i++)itemIndexes[i]>itemIndexes[i-1]?bucketOrderScore++:bucketOrderScore--;bucketOrderScore=Math.round(100*bucketOrderScore/(iiLen-1)),bucketOrderScore=Math.min(100,Math.max(bucketOrderScore,0))}else 1===iiLen&&(bucketOrderScore=100);bucketScore=(bucketScore+bucketOrderScore)/2}score+=bucketScore,bucketsNo++}}),Math.round(score/bucketsNo)}});return Exercises.DragToBucket=DragToBucket,Exercises});